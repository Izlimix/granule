-- 99 problems in Granule! (https://wiki.haskell.org/H-99:_Ninety-Nine_Haskell_Problems)

---------------------
----- Problem 1 -----
---------------------

-- find the last element of a list


-- first define what a list is:

data List a = Empty | Next a (List a)

-- we don't always have a last element, so use a 'Maybe'
-- type to represent this:

data Maybe a = None | Some a

-- we are only going to use one of the
-- elements, so we use the grade '0..1'
-- to indicate this
last : forall {a : Type} . List (a [0..1]) -> Maybe a
last Empty            = None;
last (Next [x] Empty) = Some x;
last (Next [_] xs)    = last xs

-- alternatively, we can rebuild the initial part of the
-- list as we go. In this case, our result type is a pair,
-- containing all of the list bar the last element in the
-- first component of the pair, and a value indicating
-- whether or not there was a last element, along with that
-- value (if it exists), in the second.
--
-- notice that we no longer use the '0..1' grade, as we
-- consume every value in the list once, as we build up
-- the result
last' : forall {a : Type} . List a -> (List a, Maybe a)
last' Empty = (Empty, None);
last' (Next x Empty) = (Empty, Some x);
last' (Next x xs) =
  let (init, lastElem) = last' xs
  in (Next x init, lastElem)


---------------------
----- Problem 2 -----
---------------------

-- find the last but one element of a list


-- very similar to the approach before, we just
-- adjust our pattern matching

lastButOne : forall {a : Type} . List (a [0..1]) -> Maybe a
lastButOne Empty                       = None;
lastButOne (Next [_] Empty)            = None;
lastButOne (Next [_] (Next [x] Empty)) = Some x;
lastButOne (Next [_] xs)               = lastButOne xs

lastButOne' : forall {a : Type} . List a -> (List a, Maybe a)
lastButOne' Empty                   = (Empty, None);
lastButOne' (Next x Empty)          = (Next x Empty, None);
lastButOne' (Next x (Next y Empty)) = (Next y Empty, Some x);
lastButOne' (Next x xs) =
  let (init, lastButOneElem) = lastButOne' xs
  in (Next x init, lastButOneElem)
